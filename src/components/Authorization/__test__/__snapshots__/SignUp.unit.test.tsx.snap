// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<AuthorizationLogin/> renders properly 1`] = `
<AuthorizationLogin
  onChangeForm={[Function]}
  onHideModal={[MockFunction]}
  shouldRemember={false}
>
  <Form
    data-testid="login-form"
    inline={false}
  >
    <form
      className=""
      data-testid="login-form"
    >
      <div>
        1
      </div>
      <div
        style={
          Object {
            "textAlign": "center",
          }
        }
      >
        <strong>
          Login
        </strong>
      </div>
      <WithStyles(ForwardRef(TextField))
        autoFocus={true}
        error={false}
        fullWidth={true}
        helperText=""
        id="email"
        label="Email"
        margin="normal"
        name="email"
        onChange={[Function]}
        onKeyPress={[Function]}
        placeholder="Email"
        size="small"
        type="email"
        value=""
        variant="outlined"
      >
        <ForwardRef(TextField)
          autoFocus={true}
          classes={
            Object {
              "root": "MuiTextField-root",
            }
          }
          error={false}
          fullWidth={true}
          helperText=""
          id="email"
          label="Email"
          margin="normal"
          name="email"
          onChange={[Function]}
          onKeyPress={[Function]}
          placeholder="Email"
          size="small"
          type="email"
          value=""
          variant="outlined"
        >
          <WithStyles(ForwardRef(FormControl))
            className="MuiTextField-root"
            color="primary"
            disabled={false}
            error={false}
            fullWidth={true}
            margin="normal"
            onKeyPress={[Function]}
            required={false}
            size="small"
            variant="outlined"
          >
            <ForwardRef(FormControl)
              className="MuiTextField-root"
              classes={
                Object {
                  "fullWidth": "MuiFormControl-fullWidth",
                  "marginDense": "MuiFormControl-marginDense",
                  "marginNormal": "MuiFormControl-marginNormal",
                  "root": "MuiFormControl-root",
                }
              }
              color="primary"
              disabled={false}
              error={false}
              fullWidth={true}
              margin="normal"
              onKeyPress={[Function]}
              required={false}
              size="small"
              variant="outlined"
            >
              <div
                className="MuiFormControl-root MuiTextField-root MuiFormControl-marginNormal MuiFormControl-fullWidth"
                onKeyPress={[Function]}
              >
                <WithStyles(ForwardRef(InputLabel))
                  htmlFor="email"
                  id="email-label"
                >
                  <ForwardRef(InputLabel)
                    classes={
                      Object {
                        "animated": "MuiInputLabel-animated",
                        "asterisk": "MuiInputLabel-asterisk",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "filled": "MuiInputLabel-filled",
                        "focused": "Mui-focused",
                        "formControl": "MuiInputLabel-formControl",
                        "marginDense": "MuiInputLabel-marginDense",
                        "outlined": "MuiInputLabel-outlined",
                        "required": "Mui-required",
                        "root": "MuiInputLabel-root",
                        "shrink": "MuiInputLabel-shrink",
                      }
                    }
                    htmlFor="email"
                    id="email-label"
                  >
                    <WithStyles(ForwardRef(FormLabel))
                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-marginDense MuiInputLabel-outlined"
                      classes={
                        Object {
                          "asterisk": "MuiInputLabel-asterisk",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "required": "Mui-required",
                        }
                      }
                      data-shrink={false}
                      htmlFor="email"
                      id="email-label"
                    >
                      <ForwardRef(FormLabel)
                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-marginDense MuiInputLabel-outlined"
                        classes={
                          Object {
                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                            "colorSecondary": "MuiFormLabel-colorSecondary",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "filled": "MuiFormLabel-filled",
                            "focused": "Mui-focused Mui-focused",
                            "required": "Mui-required Mui-required",
                            "root": "MuiFormLabel-root",
                          }
                        }
                        data-shrink={false}
                        htmlFor="email"
                        id="email-label"
                      >
                        <label
                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-marginDense MuiInputLabel-outlined"
                          data-shrink={false}
                          htmlFor="email"
                          id="email-label"
                        >
                          Email
                        </label>
                      </ForwardRef(FormLabel)>
                    </WithStyles(ForwardRef(FormLabel))>
                  </ForwardRef(InputLabel)>
                </WithStyles(ForwardRef(InputLabel))>
                <WithStyles(ForwardRef(OutlinedInput))
                  autoFocus={true}
                  fullWidth={true}
                  id="email"
                  label={
                    <React.Fragment>
                      Email
                    </React.Fragment>
                  }
                  multiline={false}
                  name="email"
                  onChange={[Function]}
                  placeholder="Email"
                  type="email"
                  value=""
                >
                  <ForwardRef(OutlinedInput)
                    autoFocus={true}
                    classes={
                      Object {
                        "adornedEnd": "MuiOutlinedInput-adornedEnd",
                        "adornedStart": "MuiOutlinedInput-adornedStart",
                        "colorSecondary": "MuiOutlinedInput-colorSecondary",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "focused": "Mui-focused",
                        "input": "MuiOutlinedInput-input",
                        "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                        "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                        "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                        "inputMultiline": "MuiOutlinedInput-inputMultiline",
                        "marginDense": "MuiOutlinedInput-marginDense",
                        "multiline": "MuiOutlinedInput-multiline",
                        "notchedOutline": "MuiOutlinedInput-notchedOutline",
                        "root": "MuiOutlinedInput-root",
                      }
                    }
                    fullWidth={true}
                    id="email"
                    label={
                      <React.Fragment>
                        Email
                      </React.Fragment>
                    }
                    multiline={false}
                    name="email"
                    onChange={[Function]}
                    placeholder="Email"
                    type="email"
                    value=""
                  >
                    <WithStyles(ForwardRef(InputBase))
                      autoFocus={true}
                      classes={
                        Object {
                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                          "adornedStart": "MuiOutlinedInput-adornedStart",
                          "colorSecondary": "MuiOutlinedInput-colorSecondary",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "input": "MuiOutlinedInput-input",
                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                          "marginDense": "MuiOutlinedInput-marginDense",
                          "multiline": "MuiOutlinedInput-multiline",
                          "notchedOutline": null,
                          "root": "MuiOutlinedInput-root",
                        }
                      }
                      fullWidth={true}
                      id="email"
                      inputComponent="input"
                      multiline={false}
                      name="email"
                      onChange={[Function]}
                      placeholder="Email"
                      renderSuffix={[Function]}
                      type="email"
                      value=""
                    >
                      <ForwardRef(InputBase)
                        autoFocus={true}
                        classes={
                          Object {
                            "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                            "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                            "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "focused": "Mui-focused Mui-focused",
                            "formControl": "MuiInputBase-formControl",
                            "fullWidth": "MuiInputBase-fullWidth",
                            "input": "MuiInputBase-input MuiOutlinedInput-input",
                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                            "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                            "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                            "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                            "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                            "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                            "root": "MuiInputBase-root MuiOutlinedInput-root",
                          }
                        }
                        fullWidth={true}
                        id="email"
                        inputComponent="input"
                        multiline={false}
                        name="email"
                        onChange={[Function]}
                        placeholder="Email"
                        renderSuffix={[Function]}
                        type="email"
                        value=""
                      >
                        <div
                          className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl MuiInputBase-marginDense MuiOutlinedInput-marginDense"
                          onClick={[Function]}
                        >
                          <input
                            aria-invalid={false}
                            autoFocus={true}
                            className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense"
                            disabled={false}
                            id="email"
                            name="email"
                            onAnimationStart={[Function]}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            placeholder="Email"
                            required={false}
                            type="email"
                            value=""
                          />
                          <WithStyles(ForwardRef(NotchedOutline))
                            className="MuiOutlinedInput-notchedOutline"
                            label={
                              <React.Fragment>
                                Email
                              </React.Fragment>
                            }
                            labelWidth={0}
                            notched={false}
                          >
                            <ForwardRef(NotchedOutline)
                              className="MuiOutlinedInput-notchedOutline"
                              classes={
                                Object {
                                  "legend": "PrivateNotchedOutline-legend-60",
                                  "legendLabelled": "PrivateNotchedOutline-legendLabelled-61",
                                  "legendNotched": "PrivateNotchedOutline-legendNotched-62",
                                  "root": "PrivateNotchedOutline-root-59",
                                }
                              }
                              label={
                                <React.Fragment>
                                  Email
                                </React.Fragment>
                              }
                              labelWidth={0}
                              notched={false}
                            >
                              <fieldset
                                aria-hidden={true}
                                className="PrivateNotchedOutline-root-59 MuiOutlinedInput-notchedOutline"
                              >
                                <legend
                                  className="PrivateNotchedOutline-legendLabelled-61"
                                >
                                  <span>
                                    Email
                                  </span>
                                </legend>
                              </fieldset>
                            </ForwardRef(NotchedOutline)>
                          </WithStyles(ForwardRef(NotchedOutline))>
                        </div>
                      </ForwardRef(InputBase)>
                    </WithStyles(ForwardRef(InputBase))>
                  </ForwardRef(OutlinedInput)>
                </WithStyles(ForwardRef(OutlinedInput))>
              </div>
            </ForwardRef(FormControl)>
          </WithStyles(ForwardRef(FormControl))>
        </ForwardRef(TextField)>
      </WithStyles(ForwardRef(TextField))>
      <FormGroup
        controlId="formLogin"
      >
        <div
          className="form-group"
        >
          <br />
          <FormLabel
            column={false}
            srOnly={false}
          >
            <label
              className="form-label"
              htmlFor="formLogin"
            >
              Password
            </label>
          </FormLabel>
          <FormControl
            data-testid="password"
            name="password"
            onChange={[Function]}
            placeholder="Password"
            type="password"
            value="1"
          >
            <input
              className="form-control"
              data-testid="password"
              id="formLogin"
              name="password"
              onChange={[Function]}
              placeholder="Password"
              type="password"
              value="1"
            />
          </FormControl>
        </div>
      </FormGroup>
      <FormCheck
        checked={false}
        data-testid="remember"
        disabled={false}
        id="default-checkbox"
        inline={false}
        isInvalid={false}
        isValid={false}
        label="Remember me"
        name="remember"
        onChange={[Function]}
        title=""
        type="checkbox"
      >
        <div
          className="form-check"
        >
          <FormCheckInput
            as="input"
            checked={false}
            data-testid="remember"
            disabled={false}
            isInvalid={false}
            isStatic={false}
            isValid={false}
            name="remember"
            onChange={[Function]}
            type="checkbox"
          >
            <input
              checked={false}
              className="form-check-input"
              data-testid="remember"
              disabled={false}
              id="default-checkbox"
              name="remember"
              onChange={[Function]}
              type="checkbox"
            />
          </FormCheckInput>
          <FormCheckLabel
            title=""
          >
            <label
              className="form-check-label"
              htmlFor="default-checkbox"
              title=""
            >
              Remember me
            </label>
          </FormCheckLabel>
        </div>
      </FormCheck>
      <Button
        active={false}
        block={true}
        disabled={true}
        onClick={[Function]}
        type="submit"
        variant="primary"
      >
        <button
          className="btn btn-primary btn-block"
          disabled={true}
          onClick={[Function]}
          type="submit"
        >
          LOGIN
        </button>
      </Button>
      <Container
        fluid={false}
      >
        <div
          className="container"
        >
          <Row
            noGutters={false}
          >
            <div
              className="row"
            >
              <a
                href="#"
                onClick={[Function]}
              >
                Forgot password?
              </a>
              <a
                href="#"
                onClick={[Function]}
              >
                Don't have an account? Sign Up
              </a>
            </div>
          </Row>
        </div>
      </Container>
    </form>
  </Form>
</AuthorizationLogin>
`;
